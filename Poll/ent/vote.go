// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"poll/ent/answer"
	"poll/ent/question"
	"poll/ent/user"
	"poll/ent/vote"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Vote is the model entity for the Vote schema.
type Vote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID int `json:"question_id,omitempty"`
	// AnswerID holds the value of the "answer_id" field.
	AnswerID int `json:"answer_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoteQuery when eager-loading is set.
	Edges VoteEdges `json:"edges"`
}

// VoteEdges holds the relations/edges for other nodes in the graph.
type VoteEdges struct {
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// Answer holds the value of the answer edge.
	Answer *Answer `json:"answer,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) AnswerOrErr() (*Answer, error) {
	if e.loadedTypes[1] {
		if e.Answer == nil {
			// The edge answer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vote) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vote.FieldID, vote.FieldQuestionID, vote.FieldAnswerID, vote.FieldUserID:
			values[i] = new(sql.NullInt64)
		case vote.FieldCreatedAt, vote.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vote", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vote fields.
func (v *Vote) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vote.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				v.QuestionID = int(value.Int64)
			}
		case vote.FieldAnswerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer_id", values[i])
			} else if value.Valid {
				v.AnswerID = int(value.Int64)
			}
		case vote.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				v.UserID = int(value.Int64)
			}
		case vote.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case vote.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryQuestion queries the "question" edge of the Vote entity.
func (v *Vote) QueryQuestion() *QuestionQuery {
	return (&VoteClient{config: v.config}).QueryQuestion(v)
}

// QueryAnswer queries the "answer" edge of the Vote entity.
func (v *Vote) QueryAnswer() *AnswerQuery {
	return (&VoteClient{config: v.config}).QueryAnswer(v)
}

// QueryUser queries the "user" edge of the Vote entity.
func (v *Vote) QueryUser() *UserQuery {
	return (&VoteClient{config: v.config}).QueryUser(v)
}

// Update returns a builder for updating this Vote.
// Note that you need to call Vote.Unwrap() before calling this method if this Vote
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vote) Update() *VoteUpdateOne {
	return (&VoteClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vote) Unwrap() *Vote {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vote is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vote) String() string {
	var builder strings.Builder
	builder.WriteString("Vote(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", question_id=")
	builder.WriteString(fmt.Sprintf("%v", v.QuestionID))
	builder.WriteString(", answer_id=")
	builder.WriteString(fmt.Sprintf("%v", v.AnswerID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", v.UserID))
	builder.WriteString(", created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Votes is a parsable slice of Vote.
type Votes []*Vote

func (v Votes) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
