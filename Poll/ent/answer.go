// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"poll/ent/answer"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Answer is the model entity for the Answer schema.
type Answer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// NumOfVotes holds the value of the "numOfVotes" field.
	NumOfVotes int `json:"numOfVotes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnswerQuery when eager-loading is set.
	Edges AnswerEdges `json:"edges"`
}

// AnswerEdges holds the relations/edges for other nodes in the graph.
type AnswerEdges struct {
	// QuestionID holds the value of the question_id edge.
	QuestionID []*Question `json:"question_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionIDOrErr returns the QuestionID value or an error if the edge
// was not loaded in eager-loading.
func (e AnswerEdges) QuestionIDOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.QuestionID, nil
	}
	return nil, &NotLoadedError{edge: "question_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Answer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case answer.FieldID, answer.FieldNumOfVotes:
			values[i] = new(sql.NullInt64)
		case answer.FieldBody:
			values[i] = new(sql.NullString)
		case answer.FieldCreatedAt, answer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Answer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Answer fields.
func (a *Answer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case answer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case answer.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				a.Body = value.String
			}
		case answer.FieldNumOfVotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numOfVotes", values[i])
			} else if value.Valid {
				a.NumOfVotes = int(value.Int64)
			}
		case answer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case answer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryQuestionID queries the "question_id" edge of the Answer entity.
func (a *Answer) QueryQuestionID() *QuestionQuery {
	return (&AnswerClient{config: a.config}).QueryQuestionID(a)
}

// Update returns a builder for updating this Answer.
// Note that you need to call Answer.Unwrap() before calling this method if this Answer
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Answer) Update() *AnswerUpdateOne {
	return (&AnswerClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Answer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Answer) Unwrap() *Answer {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Answer is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Answer) String() string {
	var builder strings.Builder
	builder.WriteString("Answer(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", body=")
	builder.WriteString(a.Body)
	builder.WriteString(", numOfVotes=")
	builder.WriteString(fmt.Sprintf("%v", a.NumOfVotes))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Answers is a parsable slice of Answer.
type Answers []*Answer

func (a Answers) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
